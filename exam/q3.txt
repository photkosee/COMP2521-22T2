Question 3

(a) How many times (exact number) is the statement in line 3 executed 
    (initialization of components)?
n times


(b) How many times (exact number) is the statement in line 6 executed 
    (deleting an edge from the list of edges)?
m times


(c) What is the time complexity (in big-O notation) of testing whether
    two nodes are in different components?
O(1)


(d) In the worst case, how many times (exact number) is the statement in
    line 8 executed (merging two components)? Justify your answer.
m times if every edges in the graph are in different components


(e) What is the worst case time complexity (in big-O notation) of
    merging two components into a single component? Justify your answer.
O(n) when you have to change all the other nodes into new lower value


(f) What is the overall worst case time complexity (in big-O notation)
    of this algorithm? Ignore the complexity of lines 1 and 4. Justify
    your answer.
O((n^2) + m) because it has 2 loops, 1 depends on number of nodes and has to merge
components with time complexity O(n) and another depends on number of edges


